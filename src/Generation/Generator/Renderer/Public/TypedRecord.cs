using System;
using System.Linq;
using System.Text;
using Generator.Model;

namespace Generator.Renderer.Public;

internal static class TypedRecord
{
    public static string Render(GirModel.Record record)
    {
        var name = Model.TypedRecord.GetPublicClassName(record);
        var internalHandleName = Model.TypedRecord.GetFullyQuallifiedOwnedHandle(record);

        return $@"
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;

#nullable enable

namespace {Namespace.GetPublicName(record.Namespace)};

// AUTOGENERATED FILE - DO NOT MODIFY

{PlatformSupportAttribute.Render(record as GirModel.PlatformDependent)}
public partial class {name}
{{
    public {internalHandleName} Handle {{ get; }}

    public {name}({internalHandleName} handle)
    {{
        Handle = handle;
        Initialize();
    }}

    public {name}() : this({Model.TypedRecord.GetFullyQuallifiedManagedHandle(record)}.Create())
    {{
    }}

    //TODO: This is a workaround constructor as long as we are
    //not having https://github.com/gircore/gir.core/issues/397
    private {name}(IntPtr ptr, bool ownsHandle) : this(ownsHandle
        ? new {Model.OpaqueTypedRecord.GetFullyQuallifiedOwnedHandle(record)}(ptr)
        : new {Model.OpaqueTypedRecord.GetFullyQuallifiedUnownedHandle(record)}(ptr).OwnedCopy()){{ }}

    // Implement this to perform additional steps in the constructor
    partial void Initialize();

    {record.Constructors
        .Select(ConstructorRenderer.Render)
        .Join(Environment.NewLine)}

    {FunctionRenderer.Render(record.TypeFunction)}

    {record.Fields
        .Select(f => RenderField(record, f))
        .Join(Environment.NewLine)}

    {record.Functions
        .Select(FunctionRenderer.Render)
        .Join(Environment.NewLine)}

    {record.Methods
        .Where(Method.IsEnabled)
        .Select(MethodRenderer.Render)
        .Join(Environment.NewLine)}
}}";
    }

    private static string RenderField(GirModel.Record record, GirModel.Field field)
    {
        try
        {
            var renderableField = Fields.GetRenderableField(field);

            if (field is { IsReadable: false, IsWritable: false } || field.IsPrivate)
                return string.Empty;

            var result = new StringBuilder();

            result.AppendLine($"public {renderableField.NullableTypeName} {renderableField.Name} {{");

            if (field.IsReadable)
                result.AppendLine($"get => {renderableField.GetExpression(record, field)};");

            if (field.IsWritable)
                result.AppendLine($"set => {renderableField.SetExpression(record, field)};");

            result.AppendLine("}");

            return result.ToString();
        }
        catch (Exception ex)
        {
            Log.Warning($"Did not render typed record {record.Name} field {field.Name}: {ex.Message}");
            return string.Empty;
        }
    }
}
